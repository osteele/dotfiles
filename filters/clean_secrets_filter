#!/usr/bin/env ruby

require_relative 'keychain_storage'

def die(msg)
  STDERR.puts msg
  exit 1
end

# TODO: DRY /w smudge_secrets_filter
FNAME = ARGV[0]
SECRETS_PATH = File.join(`git rev-parse --show-toplevel`.chomp, '.gitsecrets')
REPO_NAME = [
  `git config filter.secrets.reponame`.chomp,
  File.basename(`git rev-parse --show-toplevel`.chomp)
].reject(&:empty?).first
STDERR.puts "File #{SECRETS_PATH} not found; skipping filter" unless File.exist? SECRETS_PATH

secrets = SecretsMap.new(SECRETS_PATH).for_path(FNAME) if File.exist?(SECRETS_PATH)
keychain = Secrets::KeychainStore.new
matcher = /(?:\b|^)(#{secrets.keys.map {|k| Regexp.quote k}.join('|')})\s*=\s*(\S+)/ if secrets

STDIN.each do |line|
  if secrets and line =~ matcher
    name = $1
    secret = $2
    secret = $1 if secret =~ /^"(.*)"$/
    key = secrets[name]
    saved_secret = keychain.find(key)
    unless secret == saved_secret
      STDERR.puts "#{$?.exitstatus == 0 ? 'Updating' : 'Adding'} keychain entry for #{name}"
      keychain.update(key, secret)
    end
    puts line.gsub(secret, "$secret(#{key})")
    STDERR.puts "smudged #{name}" if ENV['DEBUG_GIT_FILTERS']
  else
    puts line
  end
end
