#!/usr/bin/env ruby

require 'shellwords'
require 'yaml'

def die(msg)
  STDERR.puts msg
  exit 1
end

# TODO DRY /w smudge_secrets_filter
FNAME = ARGV[0]
SHOW_ADD_PASSWORD_COMMANDS = ENV['SHOW_GIT_SECRET_COMMANDS']
SECRETS_PATH = `git config filter.secrets.file`.chomp
REPO_NAME = [
  `git config filter.secrets.reponame`.chomp,
  File.basename(`git rev-parse --show-toplevel`.chomp)
].reject(&:empty?).first
die "git config filter.secrets.file not set; skipping filter" if SECRETS_PATH.empty?
die "File #{SECRETS_PATH} not found; skipping filter" unless File.exists? SECRETS_PATH

secrets = YAML.load_file(SECRETS_PATH).keep_if do |key, v|
  key = "**/#{key}" unless key[0] == '/'
  File.fnmatch(key, FNAME)
end.values.inject(&:merge)

matcher = /\b(#{secrets.keys.map {|k| Regexp.quote k}.join('|')})\b/ if secrets

ARGF.each do |line|
  if secrets and line =~ matcher
    name = $1
    die "error: expected = or : after #{name}" unless line =~ /\b#{name}\s*[=:]\s*(\S+)/
    secret = $1
    secret = $2 if secret =~ /^(['"])(.+)\1$/
    keychain_keys = ['-a', ENV['USER'], '-c', 'gitf', '-C', 'gitf', '-D', 'git filter secret', '-l', secrets[name]]
    saved_secret = `#{Shellwords.join(['security', 'find-generic-password', '-w'] + keychain_keys)}`.chomp
    unless saved_secret == secret and not SHOW_ADD_PASSWORD_COMMANDS
      STDERR.puts "#{$?.exitstatus == 0 ? 'Updating' : 'Adding'} keychain entry for #{name}"
      command = Shellwords.join(['security', 'add-generic-password', '-s', "#{REPO_NAME}/#{FNAME}/#{secrets[name]}", '-w', secret, '-U'] + keychain_keys)
      STDERR.puts command if SHOW_ADD_PASSWORD_COMMANDS
      `#{command}`
      exit 1 unless $?.exitstatus == 0
    end
    puts line.gsub(secret, "$secret(#{name})")
    STDERR.puts "smudged #{name}" if ENV['DEBUG_GIT_FILTERS']
  else
    puts line
  end
end
